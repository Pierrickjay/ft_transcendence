// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     Int                  @id @default(autoincrement())
  username               String?
  first_name             String?
  last_name              String?
  login                  String               @unique
  email                  String
  avatar                 String?
  role                   String
  password               String
  game_won               Int?
  game_lost              Int?
  game_played            Int?
  banned_chats           UsersBannedToChats[]
  friends                Friend[]             @relation("UserToFriends")
  sentDirectMessages     DirectMsg[]          @relation("SenderMessages")
  receivedDirectMessages DirectMsg[]          @relation("ReceiverMessages")
  blockedUsers           BlockedUser[]        @relation("BlockingUser")
  usersBlockedBy         BlockedUser[]        @relation("BlockedByUser")
  twoFA                  TwoFA?               @relation("TwoFactorAuth")
  chatChannelsUser       ChatChannelsUser[]   @relation("chatChanelUser")
  channelOwner           ChatChannels[]       @relation("ChatChannelsOwner")
}

model UsersBannedToChats {
  user   User         @relation(fields: [userId], references: [id])
  userId Int
  chat   ChatChannels @relation(fields: [chatId], references: [id])
  chatId Int

  @@id([userId, chatId])
}

model ChatChannelsUser {
  id               Int              @id @default(autoincrement())
  channel_id       Int
  user_id          Int
  user_role        String
  date_joined      DateTime
  date_left        DateTime?
  chatChannelsUser User             @relation("chatChanelUser", fields: [user_id], references: [id], map: "chat_channels_user")
  channel          ChatChannels     @relation("ChatChannelsUser", fields: [channel_id], references: [id])
  messagesSent     ChatMsgHistory[] @relation("ChatMessagesSender")
}

model ChatChannels {
  id                 Int                  @id @default(autoincrement())
  owner              Int
  type               String
  name               String?
  password           String?
  chatMessages       ChatMsgHistory[]     @relation("ChatMessages")
  channelOwner       User                 @relation("ChatChannelsOwner", fields: [owner], references: [id])
  channelsUsers      ChatChannelsUser[]   @relation("ChatChannelsUser")
  // Add other fields...
  UsersBannedToChats UsersBannedToChats[]
}

model ChatMsgHistory {
  id                    Int              @id @default(autoincrement())
  chat_channels_id      Int
  chat_channels_user_id Int
  message               String
  date_sent             DateTime
  channel               ChatChannels     @relation("ChatMessages", fields: [chat_channels_id], references: [id])
  sender                ChatChannelsUser @relation("ChatMessagesSender", fields: [chat_channels_user_id], references: [id])
}

model DirectMsg {
  id          Int    @id @default(autoincrement())
  sender_id   Int
  receiver_id Int
  msg_status  String
  message     String
  sender      User   @relation("SenderMessages", fields: [sender_id], references: [id])
  receiver    User   @relation("ReceiverMessages", fields: [receiver_id], references: [id])
}

model TwoFA {
  id            Int    @id @default(autoincrement())
  user_id       Int    @unique
  qr_code       String
  ascii_secret  String
  authenticator String
  user          User   @relation("TwoFactorAuth", fields: [user_id], references: [id])
}

model Friend {
  id                Int     @id @default(autoincrement())
  user_id           Int
  friend_id         Int
  friendship_status String?
  user              User    @relation("UserToFriends", fields: [user_id], references: [id])
}

model Game {
  id               Int       @id @default(autoincrement())
  player_one_id    Int
  player_two_id    Int
  winner_id        Int?
  game_status      String?
  player_one_score Int?
  player_two_score Int?
  date_begin       DateTime  @default(now())
  date_end         DateTime?
}

model GameParams {
  id                Int    @id @default(autoincrement())
  type              String @default("basic")
  ballRadius        Float  @default(0.01)
  paddleWidth       Float  @default(0.02)
  paddleHeight      Float  @default(0.25)
  ballSpeedIncrease Float  @default(0.0005)
  paddleSpeed       Float  @default(0.01)
  goal              Int    @default(5)
  ballInitPosx      Float  @default(0.5)
  ballInitPosy      Float  @default(0.5)
  BallInitDirx      Float  @default(0.5)
  BallInitDiry      Float  @default(-1)
  BallInitSpeed     Float  @default(0.006)
}

model GameObstacles {
  id         Int       @id @default(autoincrement())
  posx       Float
  posy       Float
  width      Float
  height     Float
  img        String?
  lives      Int
  GameMaps   GameMaps? @relation(fields: [gameMapsId], references: [id])
  gameMapsId Int?
}

model GameMaps {
  id        Int             @id @default(autoincrement())
  nbBalls   Int             @default(1)
  obstacles GameObstacles[]
}

model BlockedUser {
  id              Int      @id @default(autoincrement())
  user_id         Int
  blocked_user_id Int
  date_blocked    DateTime
  user            User     @relation("BlockingUser", fields: [user_id], references: [id])
  blockedUser     User     @relation("BlockedByUser", fields: [blocked_user_id], references: [id])
}
